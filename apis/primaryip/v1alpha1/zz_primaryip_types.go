/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrimaryIpObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPAddressID *float64 `json:"ipAddressId,omitempty" tf:"ip_address_id,omitempty"`

	// Defaults to `4`.
	IPAddressVersion *float64 `json:"ipAddressVersion,omitempty" tf:"ip_address_version,omitempty"`

	VirtualMachineID *float64 `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type PrimaryIpParameters struct {

	// +crossplane:generate:reference:type=github.com/fire-ant/provider-netbox/apis/ipam/v1alpha1.IPAddress
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	IPAddressID *float64 `json:"ipAddressId,omitempty" tf:"ip_address_id,omitempty"`

	// Reference to a IPAddress in ipam to populate ipAddressId.
	// +kubebuilder:validation:Optional
	IPAddressIDRef *v1.Reference `json:"ipAddressIdRef,omitempty" tf:"-"`

	// Selector for a IPAddress in ipam to populate ipAddressId.
	// +kubebuilder:validation:Optional
	IPAddressIDSelector *v1.Selector `json:"ipAddressIdSelector,omitempty" tf:"-"`

	// Defaults to `4`.
	// +kubebuilder:validation:Optional
	IPAddressVersion *float64 `json:"ipAddressVersion,omitempty" tf:"ip_address_version,omitempty"`

	// +crossplane:generate:reference:type=github.com/fire-ant/provider-netbox/apis/virtualization/v1alpha1.Machine
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VirtualMachineID *float64 `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`

	// Reference to a Machine in virtualization to populate virtualMachineId.
	// +kubebuilder:validation:Optional
	VirtualMachineIDRef *v1.Reference `json:"virtualMachineIdRef,omitempty" tf:"-"`

	// Selector for a Machine in virtualization to populate virtualMachineId.
	// +kubebuilder:validation:Optional
	VirtualMachineIDSelector *v1.Selector `json:"virtualMachineIdSelector,omitempty" tf:"-"`
}

// PrimaryIpSpec defines the desired state of PrimaryIp
type PrimaryIpSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrimaryIpParameters `json:"forProvider"`
}

// PrimaryIpStatus defines the observed state of PrimaryIp.
type PrimaryIpStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrimaryIpObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PrimaryIp is the Schema for the PrimaryIps API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type PrimaryIp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrimaryIpSpec   `json:"spec"`
	Status            PrimaryIpStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrimaryIpList contains a list of PrimaryIps
type PrimaryIpList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrimaryIp `json:"items"`
}

// Repository type metadata.
var (
	PrimaryIp_Kind             = "PrimaryIp"
	PrimaryIp_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrimaryIp_Kind}.String()
	PrimaryIp_KindAPIVersion   = PrimaryIp_Kind + "." + CRDGroupVersion.String()
	PrimaryIp_GroupVersionKind = CRDGroupVersion.WithKind(PrimaryIp_Kind)
)

func init() {
	SchemeBuilder.Register(&PrimaryIp{}, &PrimaryIpList{})
}
