/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha11 "github.com/fire-ant/provider-netbox/apis/dcim/v1alpha1"
	v1alpha1 "github.com/fire-ant/provider-netbox/apis/tenant/v1alpha1"
	common "github.com/fire-ant/provider-netbox/config/common"
	errors "github.com/pkg/errors"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Circuit.
func (mg *Circuit) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.ProviderID),
		Extract:      common.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ProviderIDRef,
		Selector:     mg.Spec.ForProvider.ProviderIDSelector,
		To: reference.To{
			List:    &CircuitProviderList{},
			Managed: &CircuitProvider{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProviderID")
	}
	mg.Spec.ForProvider.ProviderID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProviderIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.TenantID),
		Extract:      common.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TenantIDRef,
		Selector:     mg.Spec.ForProvider.TenantIDSelector,
		To: reference.To{
			List:    &v1alpha1.TenantList{},
			Managed: &v1alpha1.Tenant{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TenantID")
	}
	mg.Spec.ForProvider.TenantID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TenantIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.TypeID),
		Extract:      common.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.TypeIDRef,
		Selector:     mg.Spec.ForProvider.TypeIDSelector,
		To: reference.To{
			List:    &CircuitTypeList{},
			Managed: &CircuitType{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TypeID")
	}
	mg.Spec.ForProvider.TypeID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TypeIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Termination.
func (mg *Termination) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.CircuitID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.CircuitIDRef,
		Selector:     mg.Spec.ForProvider.CircuitIDSelector,
		To: reference.To{
			List:    &CircuitList{},
			Managed: &Circuit{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CircuitID")
	}
	mg.Spec.ForProvider.CircuitID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CircuitIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.SiteID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SiteIDRef,
		Selector:     mg.Spec.ForProvider.SiteIDSelector,
		To: reference.To{
			List:    &v1alpha11.SiteList{},
			Managed: &v1alpha11.Site{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SiteID")
	}
	mg.Spec.ForProvider.SiteID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SiteIDRef = rsp.ResolvedReference

	return nil
}
