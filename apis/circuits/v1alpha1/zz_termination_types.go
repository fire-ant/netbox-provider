/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TerminationObservation struct {
	CircuitID *float64 `json:"circuitId,omitempty" tf:"circuit_id,omitempty"`

	CustomFields map[string]*string `json:"customFields,omitempty" tf:"custom_fields,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PortSpeed *float64 `json:"portSpeed,omitempty" tf:"port_speed,omitempty"`

	SiteID *float64 `json:"siteId,omitempty" tf:"site_id,omitempty"`

	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	TermSide *string `json:"termSide,omitempty" tf:"term_side,omitempty"`

	UpstreamSpeed *float64 `json:"upstreamSpeed,omitempty" tf:"upstream_speed,omitempty"`
}

type TerminationParameters struct {

	// +crossplane:generate:reference:type=Circuit
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	CircuitID *float64 `json:"circuitId,omitempty" tf:"circuit_id,omitempty"`

	// Reference to a Circuit to populate circuitId.
	// +kubebuilder:validation:Optional
	CircuitIDRef *v1.Reference `json:"circuitIdRef,omitempty" tf:"-"`

	// Selector for a Circuit to populate circuitId.
	// +kubebuilder:validation:Optional
	CircuitIDSelector *v1.Selector `json:"circuitIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CustomFields map[string]*string `json:"customFields,omitempty" tf:"custom_fields,omitempty"`

	// +kubebuilder:validation:Optional
	PortSpeed *float64 `json:"portSpeed,omitempty" tf:"port_speed,omitempty"`

	// +crossplane:generate:reference:type=github.com/fire-ant/provider-netbox/apis/dcim/v1alpha1.Site
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SiteID *float64 `json:"siteId,omitempty" tf:"site_id,omitempty"`

	// Reference to a Site in dcim to populate siteId.
	// +kubebuilder:validation:Optional
	SiteIDRef *v1.Reference `json:"siteIdRef,omitempty" tf:"-"`

	// Selector for a Site in dcim to populate siteId.
	// +kubebuilder:validation:Optional
	SiteIDSelector *v1.Selector `json:"siteIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TermSide *string `json:"termSide,omitempty" tf:"term_side,omitempty"`

	// +kubebuilder:validation:Optional
	UpstreamSpeed *float64 `json:"upstreamSpeed,omitempty" tf:"upstream_speed,omitempty"`
}

// TerminationSpec defines the desired state of Termination
type TerminationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TerminationParameters `json:"forProvider"`
}

// TerminationStatus defines the observed state of Termination.
type TerminationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TerminationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Termination is the Schema for the Terminations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type Termination struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.termSide)",message="termSide is a required parameter"
	Spec   TerminationSpec   `json:"spec"`
	Status TerminationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TerminationList contains a list of Terminations
type TerminationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Termination `json:"items"`
}

// Repository type metadata.
var (
	Termination_Kind             = "Termination"
	Termination_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Termination_Kind}.String()
	Termination_KindAPIVersion   = Termination_Kind + "." + CRDGroupVersion.String()
	Termination_GroupVersionKind = CRDGroupVersion.WithKind(Termination_Kind)
)

func init() {
	SchemeBuilder.Register(&Termination{}, &TerminationList{})
}
