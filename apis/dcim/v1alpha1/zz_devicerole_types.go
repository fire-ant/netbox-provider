/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeviceRoleObservation struct {
	ColorHex *string `json:"colorHex,omitempty" tf:"color_hex,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Defaults to `true`.
	VMRole *bool `json:"vmRole,omitempty" tf:"vm_role,omitempty"`
}

type DeviceRoleParameters struct {

	// +kubebuilder:validation:Optional
	ColorHex *string `json:"colorHex,omitempty" tf:"color_hex,omitempty"`

	// +kubebuilder:validation:Optional
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Defaults to `true`.
	// +kubebuilder:validation:Optional
	VMRole *bool `json:"vmRole,omitempty" tf:"vm_role,omitempty"`
}

// DeviceRoleSpec defines the desired state of DeviceRole
type DeviceRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceRoleParameters `json:"forProvider"`
}

// DeviceRoleStatus defines the observed state of DeviceRole.
type DeviceRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceRole is the Schema for the DeviceRoles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type DeviceRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.colorHex)",message="colorHex is a required parameter"
	Spec   DeviceRoleSpec   `json:"spec"`
	Status DeviceRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceRoleList contains a list of DeviceRoles
type DeviceRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeviceRole `json:"items"`
}

// Repository type metadata.
var (
	DeviceRole_Kind             = "DeviceRole"
	DeviceRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeviceRole_Kind}.String()
	DeviceRole_KindAPIVersion   = DeviceRole_Kind + "." + CRDGroupVersion.String()
	DeviceRole_GroupVersionKind = CRDGroupVersion.WithKind(DeviceRole_Kind)
)

func init() {
	SchemeBuilder.Register(&DeviceRole{}, &DeviceRoleList{})
}
