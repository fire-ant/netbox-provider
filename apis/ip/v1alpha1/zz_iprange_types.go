/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPRangeObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	EndAddress *string `json:"endAddress,omitempty" tf:"end_address,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RoleID *float64 `json:"roleId,omitempty" tf:"role_id,omitempty"`

	StartAddress *string `json:"startAddress,omitempty" tf:"start_address,omitempty"`

	// Defaults to `active`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	VrfID *float64 `json:"vrfId,omitempty" tf:"vrf_id,omitempty"`
}

type IPRangeParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EndAddress *string `json:"endAddress,omitempty" tf:"end_address,omitempty"`

	// +crossplane:generate:reference:type=github.com/fire-ant/provider-netbox/apis/ipam/v1alpha1.Role
	// +crossplane:generate:reference:extractor=github.com/fire-ant/provider-netbox/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RoleID *float64 `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// Reference to a Role in ipam to populate roleId.
	// +kubebuilder:validation:Optional
	RoleIDRef *v1.Reference `json:"roleIdRef,omitempty" tf:"-"`

	// Selector for a Role in ipam to populate roleId.
	// +kubebuilder:validation:Optional
	RoleIDSelector *v1.Selector `json:"roleIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	StartAddress *string `json:"startAddress,omitempty" tf:"start_address,omitempty"`

	// Defaults to `active`.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +crossplane:generate:reference:type=github.com/fire-ant/provider-netbox/apis/netbox/v1alpha1.Tenant
	// +crossplane:generate:reference:extractor=github.com/fire-ant/provider-netbox/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Reference to a Tenant in netbox to populate tenantId.
	// +kubebuilder:validation:Optional
	TenantIDRef *v1.Reference `json:"tenantIdRef,omitempty" tf:"-"`

	// Selector for a Tenant in netbox to populate tenantId.
	// +kubebuilder:validation:Optional
	TenantIDSelector *v1.Selector `json:"tenantIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/fire-ant/provider-netbox/apis/netbox/v1alpha1.Vrf
	// +crossplane:generate:reference:extractor=github.com/fire-ant/provider-netbox/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	VrfID *float64 `json:"vrfId,omitempty" tf:"vrf_id,omitempty"`

	// Reference to a Vrf in netbox to populate vrfId.
	// +kubebuilder:validation:Optional
	VrfIDRef *v1.Reference `json:"vrfIdRef,omitempty" tf:"-"`

	// Selector for a Vrf in netbox to populate vrfId.
	// +kubebuilder:validation:Optional
	VrfIDSelector *v1.Selector `json:"vrfIdSelector,omitempty" tf:"-"`
}

// IPRangeSpec defines the desired state of IPRange
type IPRangeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPRangeParameters `json:"forProvider"`
}

// IPRangeStatus defines the observed state of IPRange.
type IPRangeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPRangeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IPRange is the Schema for the IPRanges API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type IPRange struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.endAddress)",message="endAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.startAddress)",message="startAddress is a required parameter"
	Spec   IPRangeSpec   `json:"spec"`
	Status IPRangeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPRangeList contains a list of IPRanges
type IPRangeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPRange `json:"items"`
}

// Repository type metadata.
var (
	IPRange_Kind             = "IPRange"
	IPRange_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPRange_Kind}.String()
	IPRange_KindAPIVersion   = IPRange_Kind + "." + CRDGroupVersion.String()
	IPRange_GroupVersionKind = CRDGroupVersion.WithKind(IPRange_Kind)
)

func init() {
	SchemeBuilder.Register(&IPRange{}, &IPRangeList{})
}
