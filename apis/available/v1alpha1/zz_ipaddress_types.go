/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPAddressObservation struct {
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	IPRangeID *float64 `json:"ipRangeId,omitempty" tf:"ip_range_id,omitempty"`

	InterfaceID *float64 `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`

	PrefixID *float64 `json:"prefixId,omitempty" tf:"prefix_id,omitempty"`

	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Defaults to `active`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	VrfID *float64 `json:"vrfId,omitempty" tf:"vrf_id,omitempty"`
}

type IPAddressParameters struct {

	// +kubebuilder:validation:Optional
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +crossplane:generate:reference:type=github.com/fire-ant/provider-netbox/apis/ip/v1alpha1.IPRange
	// +crossplane:generate:reference:extractor=github.com/fire-ant/provider-netbox/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	IPRangeID *float64 `json:"ipRangeId,omitempty" tf:"ip_range_id,omitempty"`

	// Reference to a IPRange in ip to populate ipRangeId.
	// +kubebuilder:validation:Optional
	IPRangeIDRef *v1.Reference `json:"ipRangeIdRef,omitempty" tf:"-"`

	// Selector for a IPRange in ip to populate ipRangeId.
	// +kubebuilder:validation:Optional
	IPRangeIDSelector *v1.Selector `json:"ipRangeIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/fire-ant/provider-netbox/apis/netbox/v1alpha1.Vrf
	// +crossplane:generate:reference:extractor=github.com/fire-ant/provider-netbox/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	InterfaceID *float64 `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`

	// Reference to a Vrf in netbox to populate interfaceId.
	// +kubebuilder:validation:Optional
	InterfaceIDRef *v1.Reference `json:"interfaceIdRef,omitempty" tf:"-"`

	// Selector for a Vrf in netbox to populate interfaceId.
	// +kubebuilder:validation:Optional
	InterfaceIDSelector *v1.Selector `json:"interfaceIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/fire-ant/provider-netbox/apis/netbox/v1alpha1.Prefix
	// +crossplane:generate:reference:extractor=github.com/fire-ant/provider-netbox/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	PrefixID *float64 `json:"prefixId,omitempty" tf:"prefix_id,omitempty"`

	// Reference to a Prefix in netbox to populate prefixId.
	// +kubebuilder:validation:Optional
	PrefixIDRef *v1.Reference `json:"prefixIdRef,omitempty" tf:"-"`

	// Selector for a Prefix in netbox to populate prefixId.
	// +kubebuilder:validation:Optional
	PrefixIDSelector *v1.Selector `json:"prefixIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Defaults to `active`.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +crossplane:generate:reference:type=github.com/fire-ant/provider-netbox/apis/netbox/v1alpha1.Tenant
	// +crossplane:generate:reference:extractor=github.com/fire-ant/provider-netbox/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Reference to a Tenant in netbox to populate tenantId.
	// +kubebuilder:validation:Optional
	TenantIDRef *v1.Reference `json:"tenantIdRef,omitempty" tf:"-"`

	// Selector for a Tenant in netbox to populate tenantId.
	// +kubebuilder:validation:Optional
	TenantIDSelector *v1.Selector `json:"tenantIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VrfID *float64 `json:"vrfId,omitempty" tf:"vrf_id,omitempty"`
}

// IPAddressSpec defines the desired state of IPAddress
type IPAddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPAddressParameters `json:"forProvider"`
}

// IPAddressStatus defines the observed state of IPAddress.
type IPAddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPAddressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IPAddress is the Schema for the IPAddresss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type IPAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IPAddressSpec   `json:"spec"`
	Status            IPAddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPAddressList contains a list of IPAddresss
type IPAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPAddress `json:"items"`
}

// Repository type metadata.
var (
	IPAddress_Kind             = "IPAddress"
	IPAddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPAddress_Kind}.String()
	IPAddress_KindAPIVersion   = IPAddress_Kind + "." + CRDGroupVersion.String()
	IPAddress_GroupVersionKind = CRDGroupVersion.WithKind(IPAddress_Kind)
)

func init() {
	SchemeBuilder.Register(&IPAddress{}, &IPAddressList{})
}
