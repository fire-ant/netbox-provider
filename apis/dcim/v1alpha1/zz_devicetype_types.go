/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeviceTypeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ManufacturerID *float64 `json:"manufacturerId,omitempty" tf:"manufacturer_id,omitempty"`

	Model *string `json:"model,omitempty" tf:"model,omitempty"`

	PartNumber *string `json:"partNumber,omitempty" tf:"part_number,omitempty"`

	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Defaults to `1.0`.
	UHeight *float64 `json:"uHeight,omitempty" tf:"u_height,omitempty"`
}

type DeviceTypeParameters struct {

	// +crossplane:generate:reference:type=Manufacturer
	// +crossplane:generate:reference:extractor=github.com/fire-ant/provider-netbox/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ManufacturerID *float64 `json:"manufacturerId,omitempty" tf:"manufacturer_id,omitempty"`

	// Reference to a Manufacturer to populate manufacturerId.
	// +kubebuilder:validation:Optional
	ManufacturerIDRef *v1.Reference `json:"manufacturerIdRef,omitempty" tf:"-"`

	// Selector for a Manufacturer to populate manufacturerId.
	// +kubebuilder:validation:Optional
	ManufacturerIDSelector *v1.Selector `json:"manufacturerIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Model *string `json:"model,omitempty" tf:"model,omitempty"`

	// +kubebuilder:validation:Optional
	PartNumber *string `json:"partNumber,omitempty" tf:"part_number,omitempty"`

	// +kubebuilder:validation:Optional
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Defaults to `1.0`.
	// +kubebuilder:validation:Optional
	UHeight *float64 `json:"uHeight,omitempty" tf:"u_height,omitempty"`
}

// DeviceTypeSpec defines the desired state of DeviceType
type DeviceTypeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceTypeParameters `json:"forProvider"`
}

// DeviceTypeStatus defines the observed state of DeviceType.
type DeviceTypeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceTypeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceType is the Schema for the DeviceTypes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type DeviceType struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.model)",message="model is a required parameter"
	Spec   DeviceTypeSpec   `json:"spec"`
	Status DeviceTypeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceTypeList contains a list of DeviceTypes
type DeviceTypeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeviceType `json:"items"`
}

// Repository type metadata.
var (
	DeviceType_Kind             = "DeviceType"
	DeviceType_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeviceType_Kind}.String()
	DeviceType_KindAPIVersion   = DeviceType_Kind + "." + CRDGroupVersion.String()
	DeviceType_GroupVersionKind = CRDGroupVersion.WithKind(DeviceType_Kind)
)

func init() {
	SchemeBuilder.Register(&DeviceType{}, &DeviceTypeList{})
}
