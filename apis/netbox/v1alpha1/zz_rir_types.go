/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RirObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`
}

type RirParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`
}

// RirSpec defines the desired state of Rir
type RirSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RirParameters `json:"forProvider"`
}

// RirStatus defines the observed state of Rir.
type RirStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RirObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Rir is the Schema for the Rirs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type Rir struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   RirSpec   `json:"spec"`
	Status RirStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RirList contains a list of Rirs
type RirList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rir `json:"items"`
}

// Repository type metadata.
var (
	Rir_Kind             = "Rir"
	Rir_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rir_Kind}.String()
	Rir_KindAPIVersion   = Rir_Kind + "." + CRDGroupVersion.String()
	Rir_GroupVersionKind = CRDGroupVersion.WithKind(Rir_Kind)
)

func init() {
	SchemeBuilder.Register(&Rir{}, &RirList{})
}
