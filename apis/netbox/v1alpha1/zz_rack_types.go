/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RackObservation struct {
	AssetTag *string `json:"assetTag,omitempty" tf:"asset_tag,omitempty"`

	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	CustomFields map[string]*string `json:"customFields,omitempty" tf:"custom_fields,omitempty"`

	// If rack units are descending. Defaults to `false`.
	DescUnits *bool `json:"descUnits,omitempty" tf:"desc_units,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	FacilityID *string `json:"facilityId,omitempty" tf:"facility_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LocationID *float64 `json:"locationId,omitempty" tf:"location_id,omitempty"`

	MaxWeight *float64 `json:"maxWeight,omitempty" tf:"max_weight,omitempty"`

	MountingDepth *float64 `json:"mountingDepth,omitempty" tf:"mounting_depth,omitempty"`

	OuterDepth *float64 `json:"outerDepth,omitempty" tf:"outer_depth,omitempty"`

	// One of [mm, in].
	OuterUnit *string `json:"outerUnit,omitempty" tf:"outer_unit,omitempty"`

	OuterWidth *float64 `json:"outerWidth,omitempty" tf:"outer_width,omitempty"`

	RoleID *float64 `json:"roleId,omitempty" tf:"role_id,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	SiteID *float64 `json:"siteId,omitempty" tf:"site_id,omitempty"`

	// One of [reserved available planned active deprecated].
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// One of [2-post-frame 4-post-frame 4-post-cabinet wall-frame wall-frame-vertical wall-cabinet wall-cabinet-vertical].
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UHeight *float64 `json:"uHeight,omitempty" tf:"u_height,omitempty"`

	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`

	// One of [kg, g, lb, oz].
	WeightUnit *string `json:"weightUnit,omitempty" tf:"weight_unit,omitempty"`

	// One of [10, 19, 21, 23].
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type RackParameters struct {

	// +kubebuilder:validation:Optional
	AssetTag *string `json:"assetTag,omitempty" tf:"asset_tag,omitempty"`

	// +kubebuilder:validation:Optional
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// +kubebuilder:validation:Optional
	CustomFields map[string]*string `json:"customFields,omitempty" tf:"custom_fields,omitempty"`

	// If rack units are descending. Defaults to `false`.
	// +kubebuilder:validation:Optional
	DescUnits *bool `json:"descUnits,omitempty" tf:"desc_units,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	FacilityID *string `json:"facilityId,omitempty" tf:"facility_id,omitempty"`

	// +kubebuilder:validation:Optional
	LocationID *float64 `json:"locationId,omitempty" tf:"location_id,omitempty"`

	// +kubebuilder:validation:Optional
	MaxWeight *float64 `json:"maxWeight,omitempty" tf:"max_weight,omitempty"`

	// +kubebuilder:validation:Optional
	MountingDepth *float64 `json:"mountingDepth,omitempty" tf:"mounting_depth,omitempty"`

	// +kubebuilder:validation:Optional
	OuterDepth *float64 `json:"outerDepth,omitempty" tf:"outer_depth,omitempty"`

	// One of [mm, in].
	// +kubebuilder:validation:Optional
	OuterUnit *string `json:"outerUnit,omitempty" tf:"outer_unit,omitempty"`

	// +kubebuilder:validation:Optional
	OuterWidth *float64 `json:"outerWidth,omitempty" tf:"outer_width,omitempty"`

	// +kubebuilder:validation:Optional
	RoleID *float64 `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	SiteID *float64 `json:"siteId,omitempty" tf:"site_id,omitempty"`

	// One of [reserved available planned active deprecated].
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// One of [2-post-frame 4-post-frame 4-post-cabinet wall-frame wall-frame-vertical wall-cabinet wall-cabinet-vertical].
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UHeight *float64 `json:"uHeight,omitempty" tf:"u_height,omitempty"`

	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`

	// One of [kg, g, lb, oz].
	// +kubebuilder:validation:Optional
	WeightUnit *string `json:"weightUnit,omitempty" tf:"weight_unit,omitempty"`

	// One of [10, 19, 21, 23].
	// +kubebuilder:validation:Optional
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

// RackSpec defines the desired state of Rack
type RackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RackParameters `json:"forProvider"`
}

// RackStatus defines the observed state of Rack.
type RackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Rack is the Schema for the Racks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type Rack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.siteId)",message="siteId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.status)",message="status is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.uHeight)",message="uHeight is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.width)",message="width is a required parameter"
	Spec   RackSpec   `json:"spec"`
	Status RackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RackList contains a list of Racks
type RackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Rack `json:"items"`
}

// Repository type metadata.
var (
	Rack_Kind             = "Rack"
	Rack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Rack_Kind}.String()
	Rack_KindAPIVersion   = Rack_Kind + "." + CRDGroupVersion.String()
	Rack_GroupVersionKind = CRDGroupVersion.WithKind(Rack_Kind)
)

func init() {
	SchemeBuilder.Register(&Rack{}, &RackList{})
}
