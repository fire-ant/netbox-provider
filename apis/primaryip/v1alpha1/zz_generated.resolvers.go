/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/fire-ant/provider-netbox/apis/ipam/v1alpha1"
	v1alpha11 "github.com/fire-ant/provider-netbox/apis/virtualization/v1alpha1"
	errors "github.com/pkg/errors"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this PrimaryIp.
func (mg *PrimaryIp) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.IPAddressID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.IPAddressIDRef,
		Selector:     mg.Spec.ForProvider.IPAddressIDSelector,
		To: reference.To{
			List:    &v1alpha1.IPAddressList{},
			Managed: &v1alpha1.IPAddress{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPAddressID")
	}
	mg.Spec.ForProvider.IPAddressID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPAddressIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.VirtualMachineID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VirtualMachineIDRef,
		Selector:     mg.Spec.ForProvider.VirtualMachineIDSelector,
		To: reference.To{
			List:    &v1alpha11.MachineList{},
			Managed: &v1alpha11.Machine{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualMachineID")
	}
	mg.Spec.ForProvider.VirtualMachineID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualMachineIDRef = rsp.ResolvedReference

	return nil
}
