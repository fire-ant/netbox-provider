/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FieldObservation struct {
	Choices []*string `json:"choices,omitempty" tf:"choices,omitempty"`

	ContentTypes []*string `json:"contentTypes,omitempty" tf:"content_types,omitempty"`

	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	ValidationMaximum *float64 `json:"validationMaximum,omitempty" tf:"validation_maximum,omitempty"`

	ValidationMinimum *float64 `json:"validationMinimum,omitempty" tf:"validation_minimum,omitempty"`

	ValidationRegex *string `json:"validationRegex,omitempty" tf:"validation_regex,omitempty"`

	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type FieldParameters struct {

	// +kubebuilder:validation:Optional
	Choices []*string `json:"choices,omitempty" tf:"choices,omitempty"`

	// +kubebuilder:validation:Optional
	ContentTypes []*string `json:"contentTypes,omitempty" tf:"content_types,omitempty"`

	// +kubebuilder:validation:Optional
	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Required *bool `json:"required,omitempty" tf:"required,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	ValidationMaximum *float64 `json:"validationMaximum,omitempty" tf:"validation_maximum,omitempty"`

	// +kubebuilder:validation:Optional
	ValidationMinimum *float64 `json:"validationMinimum,omitempty" tf:"validation_minimum,omitempty"`

	// +kubebuilder:validation:Optional
	ValidationRegex *string `json:"validationRegex,omitempty" tf:"validation_regex,omitempty"`

	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// FieldSpec defines the desired state of Field
type FieldSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FieldParameters `json:"forProvider"`
}

// FieldStatus defines the observed state of Field.
type FieldStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FieldObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Field is the Schema for the Fields API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type Field struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.contentTypes)",message="contentTypes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.type)",message="type is a required parameter"
	Spec   FieldSpec   `json:"spec"`
	Status FieldStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FieldList contains a list of Fields
type FieldList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Field `json:"items"`
}

// Repository type metadata.
var (
	Field_Kind             = "Field"
	Field_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Field_Kind}.String()
	Field_KindAPIVersion   = Field_Kind + "." + CRDGroupVersion.String()
	Field_GroupVersionKind = CRDGroupVersion.WithKind(Field_Kind)
)

func init() {
	SchemeBuilder.Register(&Field{}, &FieldList{})
}
