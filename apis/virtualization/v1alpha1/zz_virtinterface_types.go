/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VirtInterfaceObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	TaggedVlans []*float64 `json:"taggedVlans,omitempty" tf:"tagged_vlans,omitempty"`

	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UntaggedVlan *float64 `json:"untaggedVlan,omitempty" tf:"untagged_vlan,omitempty"`

	VirtualMachineID *float64 `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

type VirtInterfaceParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// +kubebuilder:validation:Optional
	TaggedVlans []*float64 `json:"taggedVlans,omitempty" tf:"tagged_vlans,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UntaggedVlan *float64 `json:"untaggedVlan,omitempty" tf:"untagged_vlan,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualMachineID *float64 `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

// VirtInterfaceSpec defines the desired state of VirtInterface
type VirtInterfaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtInterfaceParameters `json:"forProvider"`
}

// VirtInterfaceStatus defines the observed state of VirtInterface.
type VirtInterfaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtInterfaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtInterface is the Schema for the VirtInterfaces API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type VirtInterface struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.virtualMachineId)",message="virtualMachineId is a required parameter"
	Spec   VirtInterfaceSpec   `json:"spec"`
	Status VirtInterfaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtInterfaceList contains a list of VirtInterfaces
type VirtInterfaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtInterface `json:"items"`
}

// Repository type metadata.
var (
	VirtInterface_Kind             = "VirtInterface"
	VirtInterface_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtInterface_Kind}.String()
	VirtInterface_KindAPIVersion   = VirtInterface_Kind + "." + CRDGroupVersion.String()
	VirtInterface_GroupVersionKind = CRDGroupVersion.WithKind(VirtInterface_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtInterface{}, &VirtInterfaceList{})
}
