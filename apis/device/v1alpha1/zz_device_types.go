/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeviceObservation struct {
	ClusterID *float64 `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	CustomFields map[string]*string `json:"customFields,omitempty" tf:"custom_fields,omitempty"`

	DeviceTypeID *float64 `json:"deviceTypeId,omitempty" tf:"device_type_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LocationID *float64 `json:"locationId,omitempty" tf:"location_id,omitempty"`

	PlatformID *float64 `json:"platformId,omitempty" tf:"platform_id,omitempty"`

	PrimaryIPv4 *float64 `json:"primaryIpv4,omitempty" tf:"primary_ipv4,omitempty"`

	PrimaryIPv6 *float64 `json:"primaryIpv6,omitempty" tf:"primary_ipv6,omitempty"`

	RackFace *string `json:"rackFace,omitempty" tf:"rack_face,omitempty"`

	RackID *float64 `json:"rackId,omitempty" tf:"rack_id,omitempty"`

	RackPosition *float64 `json:"rackPosition,omitempty" tf:"rack_position,omitempty"`

	RoleID *float64 `json:"roleId,omitempty" tf:"role_id,omitempty"`

	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	SiteID *float64 `json:"siteId,omitempty" tf:"site_id,omitempty"`

	// Defaults to `active`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type DeviceParameters struct {

	// +kubebuilder:validation:Optional
	ClusterID *float64 `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// +kubebuilder:validation:Optional
	CustomFields map[string]*string `json:"customFields,omitempty" tf:"custom_fields,omitempty"`

	// +kubebuilder:validation:Optional
	DeviceTypeID *float64 `json:"deviceTypeId,omitempty" tf:"device_type_id,omitempty"`

	// +kubebuilder:validation:Optional
	LocationID *float64 `json:"locationId,omitempty" tf:"location_id,omitempty"`

	// +kubebuilder:validation:Optional
	PlatformID *float64 `json:"platformId,omitempty" tf:"platform_id,omitempty"`

	// +kubebuilder:validation:Optional
	RackFace *string `json:"rackFace,omitempty" tf:"rack_face,omitempty"`

	// +kubebuilder:validation:Optional
	RackID *float64 `json:"rackId,omitempty" tf:"rack_id,omitempty"`

	// +kubebuilder:validation:Optional
	RackPosition *float64 `json:"rackPosition,omitempty" tf:"rack_position,omitempty"`

	// +kubebuilder:validation:Optional
	RoleID *float64 `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// +kubebuilder:validation:Optional
	SiteID *float64 `json:"siteId,omitempty" tf:"site_id,omitempty"`

	// Defaults to `active`.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// DeviceSpec defines the desired state of Device
type DeviceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceParameters `json:"forProvider"`
}

// DeviceStatus defines the observed state of Device.
type DeviceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Device is the Schema for the Devices API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type Device struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.deviceTypeId)",message="deviceTypeId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.roleId)",message="roleId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.siteId)",message="siteId is a required parameter"
	Spec   DeviceSpec   `json:"spec"`
	Status DeviceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceList contains a list of Devices
type DeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Device `json:"items"`
}

// Repository type metadata.
var (
	Device_Kind             = "Device"
	Device_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Device_Kind}.String()
	Device_KindAPIVersion   = Device_Kind + "." + CRDGroupVersion.String()
	Device_GroupVersionKind = CRDGroupVersion.WithKind(Device_Kind)
)

func init() {
	SchemeBuilder.Register(&Device{}, &DeviceList{})
}
