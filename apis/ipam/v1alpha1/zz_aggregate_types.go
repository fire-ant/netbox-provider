/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AggregateObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	RirID *float64 `json:"rirId,omitempty" tf:"rir_id,omitempty"`

	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type AggregateParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// +crossplane:generate:reference:type=Rir
	// +crossplane:generate:reference:extractor=github.com/fire-ant/provider-netbox/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RirID *float64 `json:"rirId,omitempty" tf:"rir_id,omitempty"`

	// Reference to a Rir to populate rirId.
	// +kubebuilder:validation:Optional
	RirIDRef *v1.Reference `json:"rirIdRef,omitempty" tf:"-"`

	// Selector for a Rir to populate rirId.
	// +kubebuilder:validation:Optional
	RirIDSelector *v1.Selector `json:"rirIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +crossplane:generate:reference:type=github.com/fire-ant/provider-netbox/apis/tenant/v1alpha1.Tenant
	// +crossplane:generate:reference:extractor=github.com/fire-ant/provider-netbox/config/common.ExtractResourceID()
	// +kubebuilder:validation:Optional
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Reference to a Tenant in tenant to populate tenantId.
	// +kubebuilder:validation:Optional
	TenantIDRef *v1.Reference `json:"tenantIdRef,omitempty" tf:"-"`

	// Selector for a Tenant in tenant to populate tenantId.
	// +kubebuilder:validation:Optional
	TenantIDSelector *v1.Selector `json:"tenantIdSelector,omitempty" tf:"-"`
}

// AggregateSpec defines the desired state of Aggregate
type AggregateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AggregateParameters `json:"forProvider"`
}

// AggregateStatus defines the observed state of Aggregate.
type AggregateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AggregateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Aggregate is the Schema for the Aggregates API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type Aggregate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.prefix)",message="prefix is a required parameter"
	Spec   AggregateSpec   `json:"spec"`
	Status AggregateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AggregateList contains a list of Aggregates
type AggregateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Aggregate `json:"items"`
}

// Repository type metadata.
var (
	Aggregate_Kind             = "Aggregate"
	Aggregate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Aggregate_Kind}.String()
	Aggregate_KindAPIVersion   = Aggregate_Kind + "." + CRDGroupVersion.String()
	Aggregate_GroupVersionKind = CRDGroupVersion.WithKind(Aggregate_Kind)
)

func init() {
	SchemeBuilder.Register(&Aggregate{}, &AggregateList{})
}
